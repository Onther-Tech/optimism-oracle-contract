{
  "address": "0xC50064efA4D104E7A1b4E29ED8177a8B51746150",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "FastWithdrawalInitiated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_origin",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_l1Token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_l2Token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "_l1Gas",
          "type": "uint32"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "fastWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_l2TokenBridge",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_l1Oracle",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "l1Oracle",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "l2TokenBridge",
      "outputs": [
        {
          "internalType": "contract iOVM_L2ERC20Bridge",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xf7bac9d42ac86a0f1d912b094ce00dac5a7efaaf628cb9de3831f71d134c862e",
  "receipt": {
    "to": null,
    "from": "0x0dc1A9bBe35aAaaC1A9FFAa8b423E2f04AA5ad8e",
    "contractAddress": "0xC50064efA4D104E7A1b4E29ED8177a8B51746150",
    "transactionIndex": 0,
    "gasUsed": "808794",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x54e02cd283425c6528ff2f333964177f3cf4c2c76b2d20b02617ea1a0dfd2360",
    "transactionHash": "0xf7bac9d42ac86a0f1d912b094ce00dac5a7efaaf628cb9de3831f71d134c862e",
    "logs": [],
    "blockNumber": 2598,
    "cumulativeGasUsed": "808794",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "6e67e130b431db3868689cb32edb38ee",
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"FastWithdrawalInitiated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_origin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_l1Token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_l2Token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_l1Gas\",\"type\":\"uint32\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"fastWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_l2TokenBridge\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_l1Oracle\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"l1Oracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"l2TokenBridge\",\"outputs\":[{\"internalType\":\"contract iOVM_L2ERC20Bridge\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/L2BridgeWrapper.sol\":\"L2BridgeWrapper\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@eth-optimism/contracts/iOVM/bridge/tokens/iOVM_L2ERC20Bridge.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >0.5.0;\\npragma experimental ABIEncoderV2;\\n\\n/**\\n * @title iOVM_L2ERC20Bridge\\n */\\ninterface iOVM_L2ERC20Bridge {\\n\\n    /**********\\n     * Events *\\n     **********/\\n\\n    event WithdrawalInitiated (\\n        address indexed _l1Token,\\n        address indexed _l2Token,\\n        address indexed _from,\\n        address _to,\\n        uint256 _amount,\\n        bytes _data\\n    );\\n\\n    event DepositFinalized (\\n        address indexed _l1Token,\\n        address indexed _l2Token,\\n        address indexed _from,\\n        address _to,\\n        uint256 _amount,\\n        bytes _data\\n    );\\n\\n    event DepositFailed (\\n        address indexed _l1Token,\\n        address indexed _l2Token,\\n        address indexed _from,\\n        address _to,\\n        uint256 _amount,\\n        bytes _data\\n    );\\n\\n\\n    /********************\\n     * Public Functions *\\n     ********************/\\n\\n    /**\\n     * @dev get the address of the corresponding L1 bridge contract.\\n     * @return Address of the corresponding L1 bridge contract.\\n     */\\n    function l1TokenBridge() external returns(address);\\n\\n    /**\\n     * @dev initiate a withdraw of some tokens to the caller's account on L1\\n     * @param _l2Token Address of L2 token where withdrawal was initiated.\\n     * @param _amount Amount of the token to withdraw.\\n     * param _l1Gas Unused, but included for potential forward compatibility considerations.\\n     * @param _data Optional data to forward to L1. This data is provided\\n     *        solely as a convenience for external contracts. Aside from enforcing a maximum\\n     *        length, these contracts provide no guarantees about its content.\\n     */\\n    function withdraw (\\n        address _l2Token,\\n        uint _amount,\\n        uint32 _l1Gas,\\n        bytes calldata _data\\n    )\\n        external;\\n\\n    /**\\n     * @dev initiate a withdraw of some token to a recipient's account on L1.\\n     * @param _l2Token Address of L2 token where withdrawal is initiated.\\n     * @param _to L1 adress to credit the withdrawal to.\\n     * @param _amount Amount of the token to withdraw.\\n     * param _l1Gas Unused, but included for potential forward compatibility considerations.\\n     * @param _data Optional data to forward to L1. This data is provided\\n     *        solely as a convenience for external contracts. Aside from enforcing a maximum\\n     *        length, these contracts provide no guarantees about its content.\\n     */\\n    function withdrawTo (\\n        address _l2Token,\\n        address _to,\\n        uint _amount,\\n        uint32 _l1Gas,\\n        bytes calldata _data\\n    )\\n        external;\\n\\n    /*************************\\n     * Cross-chain Functions *\\n     *************************/\\n\\n    /**\\n     * @dev Complete a deposit from L1 to L2, and credits funds to the recipient's balance of this\\n     * L2 token. This call will fail if it did not originate from a corresponding deposit in\\n     * OVM_l1TokenGateway.\\n     * @param _l1Token Address for the l1 token this is called with\\n     * @param _l2Token Address for the l2 token this is called with\\n     * @param _from Account to pull the deposit from on L2.\\n     * @param _to Address to receive the withdrawal at\\n     * @param _amount Amount of the token to withdraw\\n     * @param _data Data provider by the sender on L1. This data is provided\\n     *        solely as a convenience for external contracts. Aside from enforcing a maximum\\n     *        length, these contracts provide no guarantees about its content.\\n     */\\n    function finalizeDeposit (\\n        address _l1Token,\\n        address _l2Token,\\n        address _from,\\n        address _to,\\n        uint _amount,\\n        bytes calldata _data\\n    )\\n        external;\\n\\n}\\n\",\"keccak256\":\"0x45c082a93ad565931aef00d1b2fd03b59dcdec8c108fcbd7798da6766565e36d\",\"license\":\"MIT\"},\"@eth-optimism/contracts/libraries/standards/IL2StandardERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.5.16 <0.8.0;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { IERC165 } from \\\"@openzeppelin/contracts/introspection/IERC165.sol\\\";\\n\\ninterface IL2StandardERC20 is IERC20, IERC165 {\\n    function l1Token() external returns (address);\\n\\n    function mint(address _to, uint256 _amount) external;\\n\\n    function burn(address _from, uint256 _amount) external;\\n\\n    event Mint(address indexed _account, uint256 _amount);\\n    event Burn(address indexed _account, uint256 _amount);\\n}\\n\",\"keccak256\":\"0x6b0a0ff9f7660b6336a3ef1601165454ed1f6e1446a093d5c67e990cfb438220\",\"license\":\"MIT\"},\"@openzeppelin/contracts/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xf70bc25d981e4ec9673a995ad2995d5d493ea188d3d8f388bba9c227ce09fb82\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"contracts/L2BridgeWrapper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >0.5.0 <0.8.0;\\npragma experimental ABIEncoderV2;\\n\\nimport { iOVM_L2ERC20Bridge } from \\\"@eth-optimism/contracts/iOVM/bridge/tokens/iOVM_L2ERC20Bridge.sol\\\";\\nimport { IL2StandardERC20 } from \\\"@eth-optimism/contracts/libraries/standards/IL2StandardERC20.sol\\\";\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { SafeMath } from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\ncontract L2BridgeWrapper {\\n\\n    iOVM_L2ERC20Bridge public l2TokenBridge;\\n\\n    address public l1Oracle;\\n\\n    bool public initialized;\\n\\n    event FastWithdrawalInitiated (\\n        address indexed _from,\\n        address indexed _to,\\n        uint256 _amount,\\n        uint256 _fee,\\n        bytes _data\\n    );\\n\\n    function initialize (address _l2TokenBridge, address _l1Oracle) public {\\n        require(!initialized, \\\"ALREADY_INITIALIZED\\\");\\n        l2TokenBridge = iOVM_L2ERC20Bridge(_l2TokenBridge);\\n        l1Oracle = _l1Oracle;\\n\\n        initialized = true;\\n    }\\n\\n    function fastWithdraw(\\n        address _origin, // NOTE: after fraud proof window, we should transfer token to origin address.\\n        address _l1Token,\\n        address _l2Token,\\n        address _to,\\n        uint256 _amount,\\n        uint256 _fee,\\n        uint32 _l1Gas,\\n        bytes calldata _data\\n    )\\n        external\\n    {\\n        require(\\n            _origin == msg.sender,\\n            \\\"INVALID_ORIGIN\\\"\\n        );\\n        require(\\n            _to == l1Oracle,\\n            \\\"INVALID_RECIPIENT\\\" // NOTE: need to check in l1 oracle.\\n        );\\n\\n        address l1Token = IL2StandardERC20(_l2Token).l1Token();\\n        require(\\n          l1Token == _l1Token,\\n          \\\"INVALID_L1TOKEN\\\"\\n        );\\n\\n        // NOTE: _amount + _fee will burn on L2.\\n        uint256 amount = SafeMath.add(_amount, _fee);\\n        require(\\n            IERC20(_l2Token).transferFrom(msg.sender, address(this), amount),\\n            \\\"TRANSFER_FAILURE\\\"\\n        );\\n\\n        l2TokenBridge.withdrawTo(\\n            _l2Token,\\n            _to,\\n            amount,\\n            _l1Gas,\\n            _data\\n        );\\n\\n        emit FastWithdrawalInitiated(_origin, _to, _amount, _fee, _data);\\n    }\\n}\\n\",\"keccak256\":\"0xa7483b47f73c88eadf339c6f0927f31a1bf28a86d5fbea2b5de1640446a7ef2a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610dbb806100206000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c8063021634251461005c578063158ef93e1461007a578063485cc955146100985780637090fd90146100b457806391c49bf8146100d0575b600080fd5b6100646100ee565b6040516100719190610a71565b60405180910390f35b610082610114565b60405161008f9190610b1f565b60405180910390f35b6100b260048036038101906100ad9190610777565b610127565b005b6100ce60048036038101906100c991906107b3565b610216565b005b6100d86105ef565b6040516100e59190610b3a565b60405180910390f35b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160149054906101000a900460ff1681565b600160149054906101000a900460ff1615610177576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161016e90610b75565b60405180910390fd5b816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060018060146101000a81548160ff0219169083151502179055505050565b3373ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff1614610284576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161027b90610b95565b60405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff1614610314576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161030b90610bb5565b60405180910390fd5b60008773ffffffffffffffffffffffffffffffffffffffff1663c01e1bd66040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561035e57600080fd5b505af1158015610372573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610396919061074e565b90508873ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610406576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103fd90610b55565b60405180910390fd5b60006104128787610613565b90508873ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff1660e01b815260040161045193929190610a8c565b602060405180830381600087803b15801561046b57600080fd5b505af115801561047f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104a39190610881565b6104e2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104d990610bd5565b60405180910390fd5b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a3a795488a8a848989896040518763ffffffff1660e01b815260040161054596959493929190610ac3565b600060405180830381600087803b15801561055f57600080fd5b505af1158015610573573d6000803e3d6000fd5b505050508773ffffffffffffffffffffffffffffffffffffffff168b73ffffffffffffffffffffffffffffffffffffffff167ffc778621ed40ba9f6b88741884403fa6180e9bafad81d4a2813e8f1fcb7bd24f898988886040516105da9493929190610bf5565b60405180910390a35050505050505050505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080828401905083811015610691576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f536166654d6174683a206164646974696f6e206f766572666c6f77000000000081525060200191505060405180910390fd5b8091505092915050565b6000813590506106aa81610d29565b92915050565b6000815190506106bf81610d29565b92915050565b6000815190506106d481610d40565b92915050565b60008083601f8401126106ec57600080fd5b8235905067ffffffffffffffff81111561070557600080fd5b60208301915083600182028301111561071d57600080fd5b9250929050565b60008135905061073381610d57565b92915050565b60008135905061074881610d6e565b92915050565b60006020828403121561076057600080fd5b600061076e848285016106b0565b91505092915050565b6000806040838503121561078a57600080fd5b60006107988582860161069b565b92505060206107a98582860161069b565b9150509250929050565b60008060008060008060008060006101008a8c0312156107d257600080fd5b60006107e08c828d0161069b565b99505060206107f18c828d0161069b565b98505060406108028c828d0161069b565b97505060606108138c828d0161069b565b96505060806108248c828d01610724565b95505060a06108358c828d01610724565b94505060c06108468c828d01610739565b93505060e08a013567ffffffffffffffff81111561086357600080fd5b61086f8c828d016106da565b92509250509295985092959850929598565b60006020828403121561089357600080fd5b60006108a1848285016106c5565b91505092915050565b6108b381610caf565b82525050565b6108c281610c57565b82525050565b6108d181610c69565b82525050565b60006108e38385610c35565b93506108f0838584610d09565b6108f983610d18565b840190509392505050565b61090d81610cc1565b82525050565b6000610920600f83610c46565b91507f494e56414c49445f4c31544f4b454e00000000000000000000000000000000006000830152602082019050919050565b6000610960601383610c46565b91507f414c52454144595f494e495449414c495a4544000000000000000000000000006000830152602082019050919050565b60006109a0600e83610c46565b91507f494e56414c49445f4f524947494e0000000000000000000000000000000000006000830152602082019050919050565b60006109e0601183610c46565b91507f494e56414c49445f524543495049454e540000000000000000000000000000006000830152602082019050919050565b6000610a20601083610c46565b91507f5452414e534645525f4641494c555245000000000000000000000000000000006000830152602082019050919050565b610a5c81610c95565b82525050565b610a6b81610c9f565b82525050565b6000602082019050610a8660008301846108b9565b92915050565b6000606082019050610aa160008301866108aa565b610aae60208301856108b9565b610abb6040830184610a53565b949350505050565b600060a082019050610ad860008301896108b9565b610ae560208301886108b9565b610af26040830187610a53565b610aff6060830186610a62565b8181036080830152610b128184866108d7565b9050979650505050505050565b6000602082019050610b3460008301846108c8565b92915050565b6000602082019050610b4f6000830184610904565b92915050565b60006020820190508181036000830152610b6e81610913565b9050919050565b60006020820190508181036000830152610b8e81610953565b9050919050565b60006020820190508181036000830152610bae81610993565b9050919050565b60006020820190508181036000830152610bce816109d3565b9050919050565b60006020820190508181036000830152610bee81610a13565b9050919050565b6000606082019050610c0a6000830187610a53565b610c176020830186610a53565b8181036040830152610c2a8184866108d7565b905095945050505050565b600082825260208201905092915050565b600082825260208201905092915050565b6000610c6282610c75565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b6000610cba82610ce5565b9050919050565b6000610ccc82610cd3565b9050919050565b6000610cde82610c75565b9050919050565b6000610cf082610cf7565b9050919050565b6000610d0282610c75565b9050919050565b82818337600083830152505050565b6000601f19601f8301169050919050565b610d3281610c57565b8114610d3d57600080fd5b50565b610d4981610c69565b8114610d5457600080fd5b50565b610d6081610c95565b8114610d6b57600080fd5b50565b610d7781610c9f565b8114610d8257600080fd5b5056fea2646970667358221220614d57de644e52722d2f568ed180579ef427a58f9a40eb81412b1d25b4905a0564736f6c63430007060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100575760003560e01c8063021634251461005c578063158ef93e1461007a578063485cc955146100985780637090fd90146100b457806391c49bf8146100d0575b600080fd5b6100646100ee565b6040516100719190610a71565b60405180910390f35b610082610114565b60405161008f9190610b1f565b60405180910390f35b6100b260048036038101906100ad9190610777565b610127565b005b6100ce60048036038101906100c991906107b3565b610216565b005b6100d86105ef565b6040516100e59190610b3a565b60405180910390f35b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160149054906101000a900460ff1681565b600160149054906101000a900460ff1615610177576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161016e90610b75565b60405180910390fd5b816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060018060146101000a81548160ff0219169083151502179055505050565b3373ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff1614610284576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161027b90610b95565b60405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff1614610314576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161030b90610bb5565b60405180910390fd5b60008773ffffffffffffffffffffffffffffffffffffffff1663c01e1bd66040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561035e57600080fd5b505af1158015610372573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610396919061074e565b90508873ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610406576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103fd90610b55565b60405180910390fd5b60006104128787610613565b90508873ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff1660e01b815260040161045193929190610a8c565b602060405180830381600087803b15801561046b57600080fd5b505af115801561047f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104a39190610881565b6104e2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104d990610bd5565b60405180910390fd5b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a3a795488a8a848989896040518763ffffffff1660e01b815260040161054596959493929190610ac3565b600060405180830381600087803b15801561055f57600080fd5b505af1158015610573573d6000803e3d6000fd5b505050508773ffffffffffffffffffffffffffffffffffffffff168b73ffffffffffffffffffffffffffffffffffffffff167ffc778621ed40ba9f6b88741884403fa6180e9bafad81d4a2813e8f1fcb7bd24f898988886040516105da9493929190610bf5565b60405180910390a35050505050505050505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080828401905083811015610691576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f536166654d6174683a206164646974696f6e206f766572666c6f77000000000081525060200191505060405180910390fd5b8091505092915050565b6000813590506106aa81610d29565b92915050565b6000815190506106bf81610d29565b92915050565b6000815190506106d481610d40565b92915050565b60008083601f8401126106ec57600080fd5b8235905067ffffffffffffffff81111561070557600080fd5b60208301915083600182028301111561071d57600080fd5b9250929050565b60008135905061073381610d57565b92915050565b60008135905061074881610d6e565b92915050565b60006020828403121561076057600080fd5b600061076e848285016106b0565b91505092915050565b6000806040838503121561078a57600080fd5b60006107988582860161069b565b92505060206107a98582860161069b565b9150509250929050565b60008060008060008060008060006101008a8c0312156107d257600080fd5b60006107e08c828d0161069b565b99505060206107f18c828d0161069b565b98505060406108028c828d0161069b565b97505060606108138c828d0161069b565b96505060806108248c828d01610724565b95505060a06108358c828d01610724565b94505060c06108468c828d01610739565b93505060e08a013567ffffffffffffffff81111561086357600080fd5b61086f8c828d016106da565b92509250509295985092959850929598565b60006020828403121561089357600080fd5b60006108a1848285016106c5565b91505092915050565b6108b381610caf565b82525050565b6108c281610c57565b82525050565b6108d181610c69565b82525050565b60006108e38385610c35565b93506108f0838584610d09565b6108f983610d18565b840190509392505050565b61090d81610cc1565b82525050565b6000610920600f83610c46565b91507f494e56414c49445f4c31544f4b454e00000000000000000000000000000000006000830152602082019050919050565b6000610960601383610c46565b91507f414c52454144595f494e495449414c495a4544000000000000000000000000006000830152602082019050919050565b60006109a0600e83610c46565b91507f494e56414c49445f4f524947494e0000000000000000000000000000000000006000830152602082019050919050565b60006109e0601183610c46565b91507f494e56414c49445f524543495049454e540000000000000000000000000000006000830152602082019050919050565b6000610a20601083610c46565b91507f5452414e534645525f4641494c555245000000000000000000000000000000006000830152602082019050919050565b610a5c81610c95565b82525050565b610a6b81610c9f565b82525050565b6000602082019050610a8660008301846108b9565b92915050565b6000606082019050610aa160008301866108aa565b610aae60208301856108b9565b610abb6040830184610a53565b949350505050565b600060a082019050610ad860008301896108b9565b610ae560208301886108b9565b610af26040830187610a53565b610aff6060830186610a62565b8181036080830152610b128184866108d7565b9050979650505050505050565b6000602082019050610b3460008301846108c8565b92915050565b6000602082019050610b4f6000830184610904565b92915050565b60006020820190508181036000830152610b6e81610913565b9050919050565b60006020820190508181036000830152610b8e81610953565b9050919050565b60006020820190508181036000830152610bae81610993565b9050919050565b60006020820190508181036000830152610bce816109d3565b9050919050565b60006020820190508181036000830152610bee81610a13565b9050919050565b6000606082019050610c0a6000830187610a53565b610c176020830186610a53565b8181036040830152610c2a8184866108d7565b905095945050505050565b600082825260208201905092915050565b600082825260208201905092915050565b6000610c6282610c75565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b6000610cba82610ce5565b9050919050565b6000610ccc82610cd3565b9050919050565b6000610cde82610c75565b9050919050565b6000610cf082610cf7565b9050919050565b6000610d0282610c75565b9050919050565b82818337600083830152505050565b6000601f19601f8301169050919050565b610d3281610c57565b8114610d3d57600080fd5b50565b610d4981610c69565b8114610d5457600080fd5b50565b610d6081610c95565b8114610d6b57600080fd5b50565b610d7781610c9f565b8114610d8257600080fd5b5056fea2646970667358221220614d57de644e52722d2f568ed180579ef427a58f9a40eb81412b1d25b4905a0564736f6c63430007060033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8498,
        "contract": "contracts/L2BridgeWrapper.sol:L2BridgeWrapper",
        "label": "l2TokenBridge",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(iOVM_L2ERC20Bridge)601"
      },
      {
        "astId": 8500,
        "contract": "contracts/L2BridgeWrapper.sol:L2BridgeWrapper",
        "label": "l1Oracle",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 8502,
        "contract": "contracts/L2BridgeWrapper.sol:L2BridgeWrapper",
        "label": "initialized",
        "offset": 20,
        "slot": "1",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(iOVM_L2ERC20Bridge)601": {
        "encoding": "inplace",
        "label": "contract iOVM_L2ERC20Bridge",
        "numberOfBytes": "20"
      }
    }
  }
}